swagger: '2.0'

# This is your document metadata
info:
  version: "0.1.0"
  title: API сервера знакомств

# Describe your paths here
paths:
  /api/v1/auth/register:
    post:
      summary:
        Регистрация пользователя
      parameters:
        - name: user
          in: body
          description: Информация о пользователе
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description:
            пользователь успешно зарегистрирован.
          schema:
            type: object
            description: ответ с токеном авторизации
            example:
              {
                data: token_of_the_user
              }
        400:
          description:
            ошибка в запросе
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: плохой запрос
              }
        409:
          description:
            пользователь уже присутствует в базе данных
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: конфликт
              }
        500:
          description:
            ошибка на сервере
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: сервер упал
              }

  /api/v1/auth/login:
    post:
      summary:
        Логин пользователя
      parameters:
        - name: login
          in: body
          description: Информация о пользователе
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description:
            пользователь успешно зарегистрирован.
          schema:
            type: object
            description: ответ с токеном авторизации
            example:
              {
                data: token_of_the_user
              }
        400:
          description:
            ошибка в запросе
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: плохой запрос
              }
        404:
          description:
            пользователь не найден в базе
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: пользователь не найден
              }
        500:
          description:
            ошибка на сервере
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: сервер упал
              }

  /api/v1/user/position/save:
    post:
      summary:
        Сохранить гео-метку
      parameters:
        - name: position
          in: body
          description: положение пользователя в текущий момент
          required: true
          schema:
            $ref: '#/definitions/Position'
        - name: Authorization
          in: header
          description: авторизационный токен
          required: true
          type: string
      responses:
        200:
          description:
            пользователь успешно зарегистрирован
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {}
        400:
          description:
            ошибка в запросе
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: плохой запрос
              }
        401:
          description:
            пользователь не авторизован
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: авторизуйся
              }
        500:
          description:
            ошибка на сервере
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: сервер упал
              }

  /api/v1/user/position/neighbours:
    get:
      summary:
        Получить гео-метки ближайших пользователей
      parameters:
        - name: Authorization
          in: header
          description: авторизационный токен
          required: true
          type: string
      responses:
        200:
          description:
            данные успешно получены
          schema:
            type: object
            description: гео-метки ближайших пользователей
            example:
              {
                "data": [$ref: '#/definitions/Position']
              }
        400:
          description:
            проблема с авторизационным токеном
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: плохой запрос
              }
        401:
          description:
            пользователь не авторизован
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: авторизуйся
              }
        500:
          description:
            ошибка на сервере
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: сервер упал
              }

  /api/v1/user/request/create:
    post:
      summary:
        Сделать запрос на встречу в реальном мире
      parameters:
        - name: request
          in: body
          description: Запрос на встречу
          required: true
          schema:
            $ref: '#/definitions/MeetRequest'
        - name: Authorization
          in: header
          description: авторизационный токен
          required: true
          type: string
      responses:
        200:
          description:
            запрос успешно создан
          schema:
            type: object
            example:
              {}
        400:
          description:
            плохой запрос
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: плохой запрос
              }
        401:
          description:
            пользователь не авторизован
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: авторизуйся
              }
        403:
          description:
            попытка создания запроса к недоступному пользователю
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: адресант не найден
              }
        500:
          description:
            Ошибка на сервере
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: сервер упал
              }

  /api/v1/user/request/all:
      get:
        summary:
          Получить все запросы непротухшие запросы
        parameters:
          - name: Authorization
            in: header
            description: авторизационный токен
            required: true
            type: string
        responses:
          200:
            description:
              запросы успешно получены
            schema:
              type: object
              example:
                {
                  "data": [$ref: '#/definitions/MeetRequest']
                }

          400:
            description:
              плохой запрос
            schema:
              type: object
              description: ответ с ошибкой
              example:
                {
                  err_msg: плохой запрос
                }
          401:
            description:
              пользователь не авторизован
            schema:
              type: object
              description: ответ с ошибкой
              example:
                {
                  err_msg: авторизуйся
                }
          500:
            description:
              Ошибка на сервере
            schema:
              type: object
              description: ответ с ошибкой
              example:
                {
                  err_msg: сервер упал
                }

  /api/v1/user/request/update:
    post:
      summary:
        Обновить состояние запроса
      parameters:
        - name: Authorization
          in: header
          description: авторизационный токен
          required: true
          type: string
      responses:
        200:
          description:
            запрос успешно обновлен
          schema:
            type: object
            example:
              {
                data: количество обновленных запросов
              }
        400:
          description:
            плохой запрос
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: плохой запрос
              }
        401:
          description:
            пользователь не авторизован
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: авторизуйся
              }
        404:
          description:
            обновляемый запрос не найден
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: запрос не найден
              }
        451:
          description:
            пользователь не может принять ответ, так как уже принял предложение кого-то другого
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: пользователь занят
              }
        500:
          description:
            Ошибка на сервере
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: сервер упал
              }

  /api/v1/user/request/new:
    get:
      summary:
        Получить новые запросы от других пользователей,
        а также обновления собственных запросов (используется в режиме поллинга)
      parameters:
        - name: Authorization
          in: header
          description: авторизационный токен
          required: true
          type: string
      responses:
        200:
          description:
            данные успешно получены
          schema:
            type: array
            items:
              $ref: '#/definitions/MeetRequest'
        400:
          description:
            плохой запрос
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: плохой запрос
              }
        401:
          description:
            пользователь не авторизован
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: авторизуйся
              }
        500:
          description:
            Ошибка на сервере
          schema:
            type: object
            description: ответ с ошибкой
            example:
              {
                err_msg: сервер упал
              }

definitions:
  User:
    type: object
    properties:
      login:
        type: string
        description: Логин пользователя
        example: Petya
      password:
        type: string
        description: Пароль пользователя
        example: some78pass
      age:
        type: integer
        description: Возраст пользователя
        example: 15
      sex:
        type: string
        description: Пол пользователя (M или F)
        example: M
      about:
        type: string
        description: Все, что пользователь хочет сообщить о себе
        example: Мне нечего сказать о себе
    required:
    - login
    - password

  Position:
    description: гео-отметка пользователя
    type: object
    properties:
      id:
        type: integer
        description: id гео-отметки
        example: 1234
      user_id:
        type: integer
        description: id пользователя, которому принадлежит гео-отметка
        example: 1234
      point:
        type: object
        $ref: '#/definitions/Point'
      time:
        type: string
        description: время отметки в формате "YYYY-MM-DDTHH:MM:SS"
        example: 2006-01-02T15:04:05
    required:
      - point

  MeetRequest:
    description: запрос на встречу
    type: object
    properties:
      id:
        type: integer
        description: id запроса
        example: 1234
      requester_id:
        type: integer
        description: id пользователя, пославшего запрос
        example: 123
      requester_login:
        type: string
        description: login пользователя, пославшего запрос
      requested_id:
        type: integer
        description: id пользователя, которому запрос послан
        example: 321
      requested_login:
        type: string
        description: login пользователя, которому запрос послан
      time:
        type: string
        description: время отметки в формате "YYYY-MM-DDTHH:MM:SS"
        example: 2006-01-02T15:04:05
      status:
        type: string
        description: статус запроса PENDING | ACCEPTED | DECLINED
        example: PENDING
    required:
      - requester_id
      - requested_id

  RequestUpdate:
    description: обновление состояния запроса
    type: object
    properties:
      id:
        type: integer
        description: id запроса, который требуется обновить
        example: 1234
      status:
        type: string
        description: новый статус запроса ACCEPTED | DECLINED
        example: ACCEPTED
    required:
      - id
      - status

  Point:
    description: точка на карте
    type: object
    properties:
      x:
        type: number
        description: Широта
        example: 11.829
      y:
        type: number
        description: Долгота
        example: 928.11
